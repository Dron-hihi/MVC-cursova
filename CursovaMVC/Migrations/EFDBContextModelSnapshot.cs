// <auto-generated />
using System;
using CursovaMVC.Data.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CursovaMVC.Migrations
{
    [DbContext(typeof(EFDBContext))]
    partial class EFDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CursovaMVC.Data.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sities");
                });

            modelBuilder.Entity("CursovaMVC.Data.EFContext.DbRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CursovaMVC.Data.EFContext.DbUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CursovaMVC.Data.EFContext.DbUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("A_HouseTypeId");

                    b.Property<int>("A_SityId");

                    b.Property<double>("Area_Lived");

                    b.Property<bool>("Built_isCompleted");

                    b.Property<int>("Floor");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<bool>("Rent");

                    b.Property<bool>("Repair");

                    b.Property<int>("Rooms");

                    b.Property<double>("Total_Area");

                    b.HasKey("Id");

                    b.HasIndex("A_HouseTypeId");

                    b.HasIndex("A_SityId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.Ground_Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Area");

                    b.Property<int>("GS_SityId");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.HasIndex("GS_SityId");

                    b.ToTable("Ground_Sections");
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Area_Lived");

                    b.Property<bool>("Built_isCompleted");

                    b.Property<int>("Count_Floor");

                    b.Property<int>("H_HouseTypeId");

                    b.Property<int>("H_SityId");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<bool>("Repair");

                    b.Property<int>("Rooms");

                    b.Property<int>("Total_Area");

                    b.HasKey("Id");

                    b.HasIndex("H_HouseTypeId");

                    b.HasIndex("H_SityId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.House_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("House_Types");
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Floor");

                    b.Property<string>("Name");

                    b.Property<int>("O_SityId");

                    b.Property<double>("Price");

                    b.Property<double>("Total_Area");

                    b.HasKey("Id");

                    b.HasIndex("O_SityId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("SityId");

                    b.Property<int>("StorageTypeId");

                    b.Property<double>("Total_Area");

                    b.HasKey("Id");

                    b.HasIndex("SityId");

                    b.HasIndex("StorageTypeId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.Storage_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Storage_Types");
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.UserProfile", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<string>("Image")
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CursovaMVC.Data.EFContext.DbUserRole", b =>
                {
                    b.HasOne("CursovaMVC.Data.EFContext.DbRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CursovaMVC.Data.EFContext.DbUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.Apartment", b =>
                {
                    b.HasOne("CursovaMVC.Data.Models.House_Type", "House_Type")
                        .WithMany()
                        .HasForeignKey("A_HouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CursovaMVC.Data.City", "Sity")
                        .WithMany()
                        .HasForeignKey("A_SityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.Ground_Section", b =>
                {
                    b.HasOne("CursovaMVC.Data.City", "Sity")
                        .WithMany()
                        .HasForeignKey("GS_SityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.House", b =>
                {
                    b.HasOne("CursovaMVC.Data.Models.House_Type", "House_Type")
                        .WithMany()
                        .HasForeignKey("H_HouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CursovaMVC.Data.City", "Sity")
                        .WithMany()
                        .HasForeignKey("H_SityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.Office", b =>
                {
                    b.HasOne("CursovaMVC.Data.City", "Sity")
                        .WithMany()
                        .HasForeignKey("O_SityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.Storage", b =>
                {
                    b.HasOne("CursovaMVC.Data.City", "Sity")
                        .WithMany()
                        .HasForeignKey("SityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CursovaMVC.Data.Models.Storage_Type", "Storage_Type")
                        .WithMany()
                        .HasForeignKey("StorageTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CursovaMVC.Data.Models.UserProfile", b =>
                {
                    b.HasOne("CursovaMVC.Data.EFContext.DbUser", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("CursovaMVC.Data.Models.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CursovaMVC.Data.EFContext.DbRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CursovaMVC.Data.EFContext.DbUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CursovaMVC.Data.EFContext.DbUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CursovaMVC.Data.EFContext.DbUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
